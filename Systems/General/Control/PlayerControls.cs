//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Systems/General/Control/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace Systems.General.Controls
{
    public partial class @PlayerControls : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @PlayerControls()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Main"",
            ""id"": ""6877f841-088c-4a41-ba3d-17e194c1b4de"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""68c98681-c190-4177-8b05-ee1f4f52c1d7"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Roll"",
                    ""type"": ""Button"",
                    ""id"": ""80104a63-ce60-4c83-95c3-b8fb613e151e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack Move"",
                    ""type"": ""Value"",
                    ""id"": ""e49fe882-b900-49ad-aead-8969177bccbe"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack Action"",
                    ""type"": ""Button"",
                    ""id"": ""b04eb596-c1c5-4832-ab00-356577892117"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""AttackSwitch"",
                    ""type"": ""Button"",
                    ""id"": ""1fc9e5d9-2558-459e-819f-744089c69ab7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Collect"",
                    ""type"": ""Button"",
                    ""id"": ""924aa5e9-eb03-43f3-bb44-d29fe43e6c17"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""fe15169e-1086-47f1-9ccb-ad144a934d86"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6528aa44-7164-4b16-8e6a-61dd5e1e7bc0"",
                    ""path"": ""<AndroidJoystick>/stick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""2cc810f1-c19d-4856-91b3-b99a85993778"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""c56c2fb7-fa25-4993-8a08-d26d6ee513a5"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""e75ad2f5-8248-47d2-af46-cccd71bdfe74"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""2155b52b-58c1-4938-ba35-1b6575cb158e"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""79ed45d7-9020-4888-8157-ef03d4807d9f"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""f2829bbf-b34d-4e15-9423-bfac15d316df"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8755d835-d276-4f26-a37d-0667d58cd886"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""48c02686-4a87-4644-b41b-99198b61762a"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9c99d13a-9246-472d-8875-5c23baa36c55"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""afa7b718-c1df-412b-ac85-5c0b9e56c66a"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Roll"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""827b06c7-201f-4665-a572-d7e4b2c96c6d"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AttackSwitch"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b794bd65-9faf-409b-a097-29d389986291"",
                    ""path"": ""<Gamepad>/dpad/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4312db13-647c-4a06-bcd6-ff9eff0e71f1"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Collect"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Main
            m_Main = asset.FindActionMap("Main", throwIfNotFound: true);
            m_Main_Move = m_Main.FindAction("Move", throwIfNotFound: true);
            m_Main_Roll = m_Main.FindAction("Roll", throwIfNotFound: true);
            m_Main_AttackMove = m_Main.FindAction("Attack Move", throwIfNotFound: true);
            m_Main_AttackAction = m_Main.FindAction("Attack Action", throwIfNotFound: true);
            m_Main_AttackSwitch = m_Main.FindAction("AttackSwitch", throwIfNotFound: true);
            m_Main_Collect = m_Main.FindAction("Collect", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }
        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }
        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Main
        private readonly InputActionMap m_Main;
        private IMainActions m_MainActionsCallbackInterface;
        private readonly InputAction m_Main_Move;
        private readonly InputAction m_Main_Roll;
        private readonly InputAction m_Main_AttackMove;
        private readonly InputAction m_Main_AttackAction;
        private readonly InputAction m_Main_AttackSwitch;
        private readonly InputAction m_Main_Collect;
        public struct MainActions
        {
            private @PlayerControls m_Wrapper;
            public MainActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_Main_Move;
            public InputAction @Roll => m_Wrapper.m_Main_Roll;
            public InputAction @AttackMove => m_Wrapper.m_Main_AttackMove;
            public InputAction @AttackAction => m_Wrapper.m_Main_AttackAction;
            public InputAction @AttackSwitch => m_Wrapper.m_Main_AttackSwitch;
            public InputAction @Collect => m_Wrapper.m_Main_Collect;
            public InputActionMap Get() { return m_Wrapper.m_Main; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(MainActions set) { return set.Get(); }
            public void SetCallbacks(IMainActions instance)
            {
                if (m_Wrapper.m_MainActionsCallbackInterface != null)
                {
                    @Move.started -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                    @Move.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                    @Move.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnMove;
                    @Roll.started -= m_Wrapper.m_MainActionsCallbackInterface.OnRoll;
                    @Roll.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnRoll;
                    @Roll.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnRoll;
                    @AttackMove.started -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackMove;
                    @AttackMove.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackMove;
                    @AttackMove.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackMove;
                    @AttackAction.started -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackAction;
                    @AttackAction.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackAction;
                    @AttackAction.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackAction;
                    @AttackSwitch.started -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackSwitch;
                    @AttackSwitch.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackSwitch;
                    @AttackSwitch.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnAttackSwitch;
                    @Collect.started -= m_Wrapper.m_MainActionsCallbackInterface.OnCollect;
                    @Collect.performed -= m_Wrapper.m_MainActionsCallbackInterface.OnCollect;
                    @Collect.canceled -= m_Wrapper.m_MainActionsCallbackInterface.OnCollect;
                }
                m_Wrapper.m_MainActionsCallbackInterface = instance;
                if (instance != null)
                {
                    @Move.started += instance.OnMove;
                    @Move.performed += instance.OnMove;
                    @Move.canceled += instance.OnMove;
                    @Roll.started += instance.OnRoll;
                    @Roll.performed += instance.OnRoll;
                    @Roll.canceled += instance.OnRoll;
                    @AttackMove.started += instance.OnAttackMove;
                    @AttackMove.performed += instance.OnAttackMove;
                    @AttackMove.canceled += instance.OnAttackMove;
                    @AttackAction.started += instance.OnAttackAction;
                    @AttackAction.performed += instance.OnAttackAction;
                    @AttackAction.canceled += instance.OnAttackAction;
                    @AttackSwitch.started += instance.OnAttackSwitch;
                    @AttackSwitch.performed += instance.OnAttackSwitch;
                    @AttackSwitch.canceled += instance.OnAttackSwitch;
                    @Collect.started += instance.OnCollect;
                    @Collect.performed += instance.OnCollect;
                    @Collect.canceled += instance.OnCollect;
                }
            }
        }
        public MainActions @Main => new MainActions(this);
        public interface IMainActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnRoll(InputAction.CallbackContext context);
            void OnAttackMove(InputAction.CallbackContext context);
            void OnAttackAction(InputAction.CallbackContext context);
            void OnAttackSwitch(InputAction.CallbackContext context);
            void OnCollect(InputAction.CallbackContext context);
        }
    }
}
